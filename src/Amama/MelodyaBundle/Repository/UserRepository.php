<?php

namespace Amama\MelodyaBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository {

    /**
   * Retourne la liste de tous les users triés par goûts musicaux.
   * Source: http://www.christophe-meneses.fr/article/creer-une-pagination-sur-un-projet-symfony
   * 
   * @param int $page
   *  Le numéro de la "page" actuelle
   * @param int $nbMaxParPage
   *  Le nombre maximum de membre par "page", c'est-à-dire 1.
   * @param string $tagMusiquePrefere
   *  Le tag de musique préférée du user connecté (userSession) 
   * 
   * @throws InvalidArgumentException
   * @throws NotFoundHttpException
   * 
   * @return Paginator
   */
  public function findAllUsersAndSort($page, $nbMaxParPage, $tagMusiquePrefere, $userActuel){

    if(!is_numeric($page)){
      throw new InvalidArgumentException("La valeur de l'argument $page est incorrecte (valeur: '".$page."').");
    }

    if ($page < 0){
      throw new NotFoundHttpException("La page demandée n'existe pas");
    }

    // Récupération de la liste des users en fonction du style de musique en commun
    $qb = $this->createQueryBuilder('u')
        ->orderBy('u.styleMusiqueFavoris');

    $query = $qb->getQuery();

    $premierUser = ($page - 1) * $nbMaxParPage;
    $query->setFirstResult($premierUser)->setMaxResults($nbMaxParPage);
    $paginator = new Paginator($query);

    if( ($paginator->count() <= $premierUser) && $page != 1 ){
      throw new NotFoundHttpException("La page demandée n'existe pas.");
    }

    return $paginator;

  }

  /**
   * Retourne la liste de tous les users excluant le user connecté
   * 
   */
  public function findAllUsersExceptCurrent($userActuel){

    return $this->createQueryBuilder('u')
        ->where("u.id != :idUserActuel")
        ->setParameter('idUserActuel', $userActuel);
  }
}
